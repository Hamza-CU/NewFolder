<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script>
      const lobbyID = "<%= lobbyID %>"
      const username = "<%= username %>"
    </script>
    <script defer src="http://localhost:3000/socket.io/socket.io.js"></script>
    <script defer src="javascripts/MainPage.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Ubuntu" rel="stylesheet">
    <style>
        body {
            background-color: rgb(51, 51, 51);
            font-family: 'Ubuntu';
            font-size: 22px;
        }

        .sidebar {
            height: 100%;
            width: 160px;
            position: fixed;
            z-index: 1;
            top: 50px;
            left: 0;
            background-color: rgb(38, 38, 38);
            overflow-x: hidden;
            padding-top: 0px;
        }

        .welcometext {
            padding-left: 160px;
        }

        .banner {
            text-align: center;
            color: white;
        }

        .gameboard {
            position: absolute;
            left: 500px;
            transform: translate(-50%);
            width: 600px;
            height: 520px;
            top: 9rem;
            background: rgb(5, 121, 245);
            border: 2px solid black;
            padding: .5rem;
            box-shadow: 5px 10px #888888;
        }

        .gameboard table tr td {
            width: 90px;
            height: 80px;
            border: 2px solid black;
            border-radius: 50%;
            background-color: white;
            cursor: pointer;
        }

        ul {
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 200px;
            background-color: #f1f1f1;
        }

        li a {
            display: block;
            color: #000;
            padding: 8px 16px;
            text-decoration: none;
        }

		    #chatbox {
          padding-left: 820px;
        }

        #message-container {
          background-color: white;
          border: 2px solid black;
          max-width: 400px;
          width: 80%;
        }

        #message-container div {
          background-color: #CCC;
          padding: 5px;
        }

        #message-container div:nth-child(2n) {
          background-color: #FFF;
        }

        #send-container {
          position: fixed;
          top: 670px;
          background-color: white;
          max-width: 400px;
          width: 80%;
          display: fixed;
        }

        #message-input {
          flex-grow: 1;
        }

        /* Change the link color on hover */

        li a:hover {
            background-color: #555;
            color: white;
        }

        /*@media only screen and (min-width: 1200px) {
            .sidebar ul {
                position: initial;
                width: fit-content;
            }
            .sidebar ul li {
                display: inline-block;
            }
            .sidebar ul li a {
                font-size: 1.3rem;
            }
            .sidebar {
                flex-basis: 20%;
                margin: 1.5;
                height: 100%;
                max-height: 100%;
            }
        }*/
    </style>
    <title>Connect 4</title>
</head>
<body>
  <div class="banner">
      <h1>Connect 4 Game</h1>
  </div>
  <div class="welcometext">
      <p style="color:white;">Match</p>
  </div>
  <div class="gameboard">
      <table>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
          <tr>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
              <td class="slot"></td>
          </tr>
      </table>
  </div>

<div id="chatbox">
  <div id="message-container"></div>
  <form id="send-container">
    <input type="text" id="message-input">
    <button type="submit" id="send-message">Send</button>
  </form>
</div>


  <div class="sidebar">
      <ul>
          <li><a href="/">Home</a></li>
          <li><a href="/profile">Profile</a></li>
          <li><a href="/friends">Friends</a></li>
          <li><a href="/spectate">Spectate</a></li>
      </ul>
      <form action="/logout?_method=DELETE" method="POST">
        <button type="submit">Log Out</button>
      </form>
  </div>
</body>
<script>

  //const matchButton = document.querySelector('.findmatch');
  const slots = document.querySelectorAll('.slot');
  var tableRow = document.getElementsByTagName('tr');
  var tableData = document.getElementsByTagName('td');
  var redColour = 'red';
  var yellowColour = 'yellow';

  var turn = true;

  for (i = 0; i < tableData.length; i ++){
      tableData[i].addEventListener('click', (p) =>{
          console.log(`${p.target.parentElement.rowIndex},${e.target.cellIndex}`)
      });
  };

  Array.prototype.forEach.call(tableData, (cell) => {
      cell.addEventListener('click', addPiece);
      cell.style.backgroundColor = 'white';
  });

  function addPiece(p){

      let column = p.target.cellIndex;
      let row = [];

      for (i = 5; i > -1; i--){
              if (tableRow[i].children[column].style.backgroundColor == 'white'){
                row.push(tableRow[i].children[column]);
                if (turn == true) {
                  row[0].style.backgroundColor = redColour;
                  console.log(winConditions());
                  if (winConditions()){
                    window.alert("red wins");
                    resetBoard();
                  }
                    turn = false;
                    return turn;
                  }

                else {
                  row[0].style.backgroundColor = yellowColour;
                  console.log(winConditions());
                  if (winConditions()){
                    window.alert("yellow wins");
                    resetBoard();
                  }
                  return turn = 1;
                }
            }
      }
  }

  function WinVertical(){
    for (let col = 0; col < 7; col++){
            for (let row = 0; row < 3; row++){
                if (tableRow[row].children[col].style.backgroundColor == tableRow[row+1].children[col].style.backgroundColor &&
                    tableRow[row].children[col].style.backgroundColor == tableRow[row+2].children[col].style.backgroundColor &&
                    tableRow[row].children[col].style.backgroundColor == tableRow[row+3].children[col].style.backgroundColor &&
                    tableRow[row].children[col].style.backgroundColor != 'white' &&
                    tableRow[row].children[col].style.backgroundColor != undefined ){
                    return true;
                }
            }
        }
    }


  function WinHorizontal(){
    for (let row = 0; row < tableRow.length; row++){
         for (let col = 0; col < 4; col++){
           if (tableRow[row].children[col].style.backgroundColor == tableRow[row].children[col+1].style.backgroundColor &&
               tableRow[row].children[col].style.backgroundColor == tableRow[row].children[col+2].style.backgroundColor &&
               tableRow[row].children[col].style.backgroundColor == tableRow[row].children[col+3].style.backgroundColor &&
               tableRow[row].children[col].style.backgroundColor != 'white' &&
               tableRow[row].children[col].style.backgroundColor != undefined){
               return true;
         }
       }
  }
  }

  function WinDiagonal1(){
    for(let col = 0; col < 4; col++){
          for (let row = 0; row < 3; row++){
            if (tableRow[row].children[col].style.backgroundColor == tableRow[row+1].children[col+1].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor == tableRow[row+2].children[col+2].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor == tableRow[row+3].children[col+3].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor != 'white' &&
                tableRow[row].children[col].style.backgroundColor != undefined){
                return true;
              }
            }
          }
        }

  function WinDiagonal2(){
    for(let col = 0; col < 4; col++){
         for (let row = 5; row > 2; row--){
            if (tableRow[row].children[col].style.backgroundColor == tableRow[row-1].children[col+1].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor == tableRow[row-2].children[col+2].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor == tableRow[row-3].children[col+3].style.backgroundColor &&
                tableRow[row].children[col].style.backgroundColor != 'white' &&
              tableRow[row].children[col].style.backgroundColor != undefined)
                {
                return true;
              }
            }
          }
  }
  function fullTable(){
      let filledTable = []
      for (i = 0; i < tableData.length; i++){
          if (tableData[i].style.backgroundColor !== 'white'){
              fullSlot.push(tableData[i]);
          }
      }
      if (filledTable.length === tableData.length){
          return true;
      }
  }

  function winConditions(){
    if (WinVertical() || WinDiagonal1() || WinDiagonal2()|| WinHorizontal()){
      return true;
    }
    else {return false;}
  }

  function resetBoard(){
    slots.forEach(slot => {
            slot.style.backgroundColor = 'white';
    });

  }
</script>
</html>
